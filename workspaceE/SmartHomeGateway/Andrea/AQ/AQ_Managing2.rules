//0=no fascia   3= siamo nella fascia e invia richiesta     (AQ system)
//1=puoi cambiare     2= non puoi        (questo codice)
//variabili necessarie per capire se è richiesto l'adattamento
var boolean adaptation_required_gf
var boolean adaptation_required_ff
//knowledge del managing
var Number ex_Pm10
var Number liv_Pm10
var Number ki_Pm10
var Number ba_Pm10
var Number cor_Pm10
var Number liv
var Number bat
var Number cor
var Number kit
val Number Hysteresis = 0.4

//start
rule "StartLoop_MySmartHomeAQ"
when
 System started
then
    start_a_aq.sendCommand(OFF) 
    start_p_aq.sendCommand(OFF)
    start_m_gf.sendCommand(ON)
    start_e_gf.sendCommand(OFF)
    start_m_ff.sendCommand(ON)
    start_e_ff.sendCommand(OFF)
    adaptation_required_gf= false
    adaptation_required_ff= false
    cor=0
    bat=0
    liv=0
    kit=0
    if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON 
then
    FF_Children_Bedroom_Fire_Alarm.sendCommand(ON)
	sendCommand(start_m_gf, OFF)
    //raccolta dei dati ricavati dai sensori del piano terra
	liv_Pm10= (GF_Living_AqPm10.state as DecimalType).doubleValue
	ba_Pm10= (GF_Bathroom_AqPm10.state as DecimalType).doubleValue
	ki_Pm10= (GF_Kitchen_AqPm10.state as DecimalType).doubleValue
    ex_Pm10= (SimAqi_Pm10.state as DecimalType).doubleValue
    sendCommand(gf_slave_to_aq_master, ON)
end


rule "Monitor_m_ff"
when
    Item start_m_ff received command ON  
then
    //raccolta dei dati ricavati dai sensori del piano terra
    FF_Bedroom_Fire_Alarm.sendCommand(ON)
    sendCommand(start_m_ff, OFF)
    cor_Pm10= (FF_Corridor_AqPm10.state as DecimalType).doubleValue
    ex_Pm10=(SimAqi_Pm10.state as DecimalType).doubleValue
    //ex_Pm10= SimAqi_Pm10.state as Number
    sendCommand(ff_slave_to_aq_master, ON)
end


//componente che aggrega le informazioni dei due monitor per passare all'analisi
rule "Aggregator_m_gf_m_ff_a_aq"
when
	Item ff_slave_to_aq_master received command ON or
    Item gf_slave_to_aq_master received command ON
then
    createTimer(now.plusSeconds(5)) [|
        FF_Children_Bedroom_Fire_Alarm.sendCommand(OFF)
        FF_Bedroom_Fire_Alarm.sendCommand(OFF)
        GF_Living_Fire_Alarm.sendCommand(ON)
        sendCommand(start_a_aq, ON)
   ]
end

rule "Analyze_a_aq"
when
 Item start_a_aq received command ON
then

    //se l'aria dentro è più sporca dell'esterno e le finestre sono chiuse richiedo l'adattamento al piano terra
    if ((liv_Pm10 > (ex_Pm10+Hysteresis) && GF_Living_Window.state==CLOSED) ||
		(ba_Pm10 > (ex_Pm10+Hysteresis) &&  GF_Bathroom_Window.state==CLOSED) ||
		(ki_Pm10 > (ex_Pm10+Hysteresis) && GF_Kitchen_Window.state==CLOSED) ||
		(liv_Pm10 < (ex_Pm10-Hysteresis) && GF_Living_Window.state==OPEN) ||
		(ba_Pm10 < (ex_Pm10-Hysteresis) &&  GF_Bathroom_Window.state==OPEN) ||
		(ki_Pm10 < (ex_Pm10-Hysteresis) && GF_Kitchen_Window.state==OPEN)) {
		
        createTimer(now.plusSeconds(5)) [|
           
           adaptation_required_gf= true
        ]
	}
    //se l'aria dentro è più sporca dell'esterno e le finestre sono chiuse richiedo l'adattamento al primo piano 
    if ((cor_Pm10 > (ex_Pm10+Hysteresis) && (FF_ChildrenRoom_Window.state==CLOSED || FF_Bedroom_Window.state==CLOSED)) || 
        (cor_Pm10 < (ex_Pm10-Hysteresis) && (FF_ChildrenRoom_Window.state==OPEN || FF_Bedroom_Window.state==OPEN))) {
            
        createTimer(now.plusSeconds(5)) [|
            
            adaptation_required_ff=true
        ]
    }
    //se qualche piano richiede l'adattamento chiamiamo il planning e affermiamo la necessità di prevalere sul managed attraverso forzatura=2 che bloccherà 
    //le azioni del managed per permettere al managing di agire indisturbato per gestire l' "emergenza"
    if(adaptation_required_gf || adaptation_required_ff){
        createTimer(now.plusSeconds(5)) [|
            
            sendCommand(start_p_aq, ON)
            forzatura.sendCommand(2)
        ]
    }
    //se non è richiesto l'adattamento
    else{
        createTimer(now.plusSeconds(5)) [|
            sendCommand(start_p_aq, ON)
            forzatura.sendCommand(2)
        ]
        //se forzatura=3 significa che il managed richiede di gestire le finestre (siamo in una fascia oraria evidentemente) e se non c'è adattamento richiesto 
        //lasciamo al managed il controllo delle finestre
        if(forzatura.state==3) 
            forzatura.sendCommand(1)
        if(gf_slave_to_aq_master.state==ON){
            createTimer(now.plusSeconds(5)) [|
                GF_Bathroom_Fire_Alarm.sendCommand(ON)
                sendCommand(gf_slave_to_aq_master, OFF)
                sendCommand(start_m_gf, ON) 
                sendCommand(start_a_aq,OFF)
            ]
        }
        if(ff_slave_to_aq_master==ON ){
            createTimer(now.plusSeconds(5)) [|
                sendCommand(ff_slave_to_aq_master, OFF)
                sendCommand(start_m_ff, ON)
                sendCommand(start_a_aq,OFF)
		    GF_Kitchen_Fire_Alarm.sendCommand(ON)
            ]
        }
    }
end
/*
rule "Plan_p_aq"
when
 Item start_p_aq received command ON
then
    sendCommand(start_p_aq, OFF)
    //se è richiesto adattamento al piano terra pianifico cosa fare attraverso i flag per ogni piano (1=apertura richiesta:0=chiusura richiesta)
    if(adaptation_required_gf==true){
        if(liv_Pm10 > ex_Pm10 && GF_Living_Window.state==CLOSED){
		    liv=1 	//apri living
        }
	    else if (liv_Pm10 < ex_Pm10 && GF_Living_Window.state==OPEN){
		    liv=2	//chiudi living
        }
	    if (ba_Pm10 > ex_Pm10 &&  GF_Bathroom_Window.state==CLOSED){
		    bat=1
        }
	    else if(ba_Pm10 < ex_Pm10 &&  GF_Bathroom_Window.state==OPEN){
		    bat=2
        }
	    if(ki_Pm10 > ex_Pm10 && GF_Kitchen_Window.state==CLOSED){
		    kit=1
        }
	    else if(ki_Pm10 < ex_Pm10 && GF_Kitchen_Window.state==OPEN){
		    kit=2
        }
        sendCommand(start_e_gf, ON)
    }
    //lo stesso vale per il primo piano
    if(adaptation_required_ff==true){
        if(cor_Pm10 > ex_Pm10 && (FF_ChildrenRoom_Window.state==CLOSED || FF_Bedroom_Window.state==CLOSED)){
            cor=1
            
        }
        else if(cor_Pm10 < ex_Pm10 && (FF_ChildrenRoom_Window.state==OPEN || FF_Bedroom_Window.state==OPEN)){
            cor=2
            
        }
        sendCommand(start_e_ff, ON)
    }   
end

rule "Exec_e_gf"
when
 Item start_e_gf received command ON
then
//grazie alle variabili possiamo eseguire l'azione richiesta dal planning
    if(liv==1){
        liv=0
        GF_Living_Window.postUpdate(OPEN)
    }
    else if(liv==2){
        liv=0
        GF_Living_Window.postUpdate(CLOSED)
    }
    if(bat==1){
        bat=0
        GF_Bathroom_Window.postUpdate(OPEN)
    }
    else if(bat==2){
        bat=0
        GF_Bathroom_Window.postUpdate(CLOSED)
    }
    if(kit==1){
        kit=0
        GF_Kitchen_Window.postUpdate(OPEN)
    }
    else if(kit==2){
        kit=0
        GF_Kitchen_Window.postUpdate(CLOSED)
    }
    sendCommand(start_e_gf, OFF)
    sendCommand(start_m_gf, ON)
end
//lo stesso per il prinmo piano
rule "Exec_e_ff"
when
    Item start_e_ff received command ON
then
    if (cor==1) {
        cor=0
        FF_Bedroom_Window.postUpdate(OPEN)
        FF_ChildrenRoom_Window.postUpdate(OPEN)
    }
    else if (cor==2) {
        cor=0
        FF_Bedroom_Window.postUpdate(CLOSED)
        FF_ChildrenRoom_Window.postUpdate(CLOSED)
    }
    sendCommand(start_e_ff, OFF)
    sendCommand(start_m_ff, ON)
end
*/