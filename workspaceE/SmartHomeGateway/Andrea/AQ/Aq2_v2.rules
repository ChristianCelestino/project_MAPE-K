var boolean adaptation_required_gf
var boolean adaptation_required_ff

var Number ex_Pm10
var Number liv_Pm10
var Number ki_Pm10
var Number ba_Pm10
var Number cor_Pm10

rule "StartLoop_MySmartHomeAQ"
when
	System started
then
	start_a_aq.sendCommand(OFF)
	start_p_aq.sendCommand(OFF)
	start_m_gf.sendCommand(ON)
	start_e_gf.sendCommand(OFF)
	start_m_ff.sendCommand(ON)
	start_e_ff.sendCommand(OFF)
	adaptation_required_gf= false
	adaptation_required_ff= false
	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON or
	Time cron "0/30 0/1 * 1/1 * ? *" 
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_aq_master, ON)
	liv_Pm10= GF_Living_AqPm10.state as Number
	ba_Pm10= GF_Bathroom_AqPm10.state as Number
	ki_Pm10= GF_Kitchen_AqPm10.state as Number
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON or 
	Time cron "0/30 0/1 * 1/1 * ? *" 
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_aq_master, ON)
	cor_Pm10= FF_Corridor_AqPm10.state as Number
end

rule "Aggregator_m_gf_m_ff_a_aq"
when
	Item gf_slaveff_slave_to_aq_master received update ON
then
	sendCommand(gf_slave_to_aq_master, OFF)
	sendCommand(ff_slave_to_aq_master, OFF)
	sendCommand(start_a_aq, ON)
	ex_Pm10= SimAqi_Pm10.state as Number
end

rule "Analyze_a_aq"
when
	Item start_a_aq received command ON
then
	sendCommand(start_a_aq, OFF)
	
	if ((liv_Pm10 > ex_Pm10 && GF_Living_Window.state==CLOSED) ||
		(ba_Pm10 > ex_Pm10 &&  GF_Bathroom_Window.state==CLOSED) ||
		(ki_Pm10 > ex_Pm10 && GF_Kitchen_Window.state==CLOSED) ||
		(liv_Pm10 < ex_Pm10 && GF_Living_Window.state==OPEN) ||
		(ba_Pm10 < ex_Pm10 &&  GF_Bathroom_Window.state==OPEN) ||
		(ki_Pm10 < ex_Pm10 && GF_Kitchen_Window.state==OPEN)) {

			adaptation_required_ff= true
	}

	if ((cor_Pm10 > ex_Pm10 && (FF_ChildrenRoom_Window.state==CLOSED || FF_Bedroom_Window.state==CLOSED)) || 
		(cor_Pm10 < ex_Pm10 && (FF_ChildrenRoom_Window.state==OPEN || FF_Bedroom_Window.state==OPEN))) {
			
			adaptation_required_ff= true
	}

	if(adaptation_required_gf || adaptation_required_ff){
		sendCommand(start_p_aq, ON)
	}
	else{
		sendCommand(start_m_gf, ON)
		sendCommand(start_m_ff, ON)
	}
end


// TO DO: ho iniziato qui, ho trovato una sezione "PLAN_e_aq" e l'ho tolta cambiandola in Exec_e_ff

rule "Plan_p_aq"
when
	Item start_p_aq received command ON
then
	sendCommand(start_p_aq, OFF)
	if (adaptation_required_gf) {
		// deve pianificare cosa fare, in base ai dati elaborati deve decidere quali finestre chiudee e quali aprire
	
		adaptation_required_gf= false	
		sendCommand(start_e_gf, ON)
	}
	if (adaptation_required_ff) {
		adaptation_required_ff= false
		sendCommand(start_e_ff, ON)
	}
end

rule "Exec_e_ff"
when
	Item start_e_ff received command ON
then
	if (cor_Pm10 > ex_Pm10 && FF_ChildrenRoom_Window.state==CLOSED || FF_Bedroom_Window.state==CLOSED) {
			FF_Bedroom_Window.postUpdate(OPEN)
			FF_ChildrenRoom_Window.postUpdate(OPEN)
		}

		if (cor_Pm10 < ex_Pm10 && (FF_ChildrenRoom_Window.state==OPEN || FF_Bedroom_Window.state==OPEN)) {
			FF_Bedroom_Window.postUpdate(OPEN)
			FF_ChildrenRoom_Window.postUpdate(OPEN)
		}
	sendCommand(start_e_ff, OFF)
	sendCommand(start_m_ff, ON)
end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
	if (liv_Pm10 > ex_Pm10 && GF_Living_Window.state==CLOSED) 
			GF_Living_Window.postUpdate(OPEN)
		
		if (ba_Pm10 > ex_Pm10 &&  GF_Bathroom_Window.state==CLOSED)
			GF_Kitchen_Window.postUpdate(OPEN)

		if (ki_Pm10 > ex_Pm10 && GF_Kitchen_Window.state==CLOSED)
			GF_Bathroom_Window.postUpdate(OPEN)

		if (liv_Pm10 < ex_Pm10 && GF_Living_Window.state==OPEN)
			GF_Living_Window.postUpdate(CLOSED)

		if (ba_Pm10 < ex_Pm10 &&  GF_Bathroom_Window.state==OPEN)
			GF_Kitchen_Window.postUpdate(CLOSED)

		if (ki_Pm10 < ex_Pm10 && GF_Kitchen_Window.state==OPEN)
			GF_Bathroom_Window.postUpdate(CLOSED)
	sendCommand(start_e_gf, OFF)
	sendCommand(start_m_gf, ON)
end
