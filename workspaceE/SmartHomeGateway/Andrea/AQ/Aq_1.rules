var boolean adaptation_required_gf
var boolean adaptation_required_ff

import java.util.Random
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Calendar
import java.text.DateFormat

//support variables
var String currentHour
var String currentMinute
var String startingClosingTime
var String stoppingClosingTime
var String startingSystemActivationTime
var String stoppingSystemActivationTime
var String currentDay
var Date startingClosingDate
var Date stoppingClosingDate
var Date startingActivationDate
var Date stoppingActivationDate
var Date currentDate
var DateFormat datos

var Number liv_Pm10
var Number ki_Pm10
var Number ba_Pm10
var Number cor_Pm10
var Number forza //Varibile per la forzatura delle finestre: 0 (inattivo), 1 (apertura), 2 (chiusura)

rule "StartLoop_MySmartHomeAQ"
when
	System started or
	Item Starting_Hour_Windows_Closing changed or
    Item Starting_Minute_Windows_Closing changed or
    Item Stopping_Hour_Windows_Closing changed or
    Item Stopping_Minute_Windows_Closing changed or
    Item Starting_Hour_System_Activation changed or
    Item Starting_Minute_System_Activation changed or
    Item Stopping_Hour_System_Activation changed or
    Item Stopping_Minute_System_Activation changed

then
	start_a_aq.sendCommand(OFF)
	start_p_aq.sendCommand(OFF)
	start_m_gf.sendCommand(ON)
	start_e_gf.sendCommand(OFF)
	start_m_ff.sendCommand(ON)
	start_e_ff.sendCommand(OFF)
	adaptation_required_ff= false
	adaptation_required_gf= false
	forza= 0 // Impostazione varibile a 0

	if (stoppingClosingDate.before(startingClosingDate)){
        Stopping_Hour_Windows_Closing.state = Starting_Hour_Windows_Closing.state
        Stopping_Minute_Windows_Closing.state = Starting_Minute_Windows_Closing.state
    }

    if (stoppingActivationDate.before(startingActivationDate)){
        Stopping_Hour_System_Activation.state = Starting_Hour_System_Activation.state
        Stopping_Minute_System_Activation.state = Starting_Minute_System_Activation.state
    }

    if (startingActivationDate.after(startingClosingDate) && startingActivationDate.before(stoppingClosingDate)){
        Starting_Hour_System_Activation.state = Stopping_Hour_Windows_Closing.state
        Starting_Minute_System_Activation.state = Stopping_Minute_Windows_Closing.state
    }

    if (stoppingActivationDate.after(startingClosingDate) && stoppingActivationDate.before(stoppingClosingDate)){
        Stopping_Hour_System_Activation.state = Starting_Hour_Windows_Closing.state
        Stopping_Minute_System_Activation.state = Starting_Minute_Windows_Closing.state
    }

    if (startingClosingDate.after(startingActivationDate) && startingClosingDate.before(stoppingActivationDate)){
        Starting_Hour_Windows_Closing.state = Stopping_Hour_System_Activation.state
        Starting_Minute_Windows_Closing.state = Stopping_Minute_System_Activation.state
    }

    if (stoppingClosingDate.after(startingActivationDate) && stoppingClosingDate.before(stoppingActivationDate)){
        Stopping_Hour_Windows_Closing.state = Starting_Hour_System_Activation.state
        Stopping_Minute_Windows_Closing.state = Starting_Minute_System_Activation.state
    }

	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON or
	Item GF_Bathroom_AqPm10 changed or
	Item GF_Living_AqPm10 changed or
	Item GF_Kitchen_AqPm10 changed 
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_aq_master, ON)
	liv_Pm10= GF_Living_AqPm10
	ba_Pm10= GF_Bathroom_AqPm10
	ki_Pm10= GF_Kitchen_AqPm10
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON or
	Item FF_Corridor_AqPm10 changed 
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_aq_master, ON)
	cor_Pm10= FF_Corridor_AqPm10
end

rule "Aggregator_m_gf_m_ff_a_aq"
when
	Item gf_slaveff_slave_to_aq_master received update ON
then
	sendCommand(gf_slave_to_aq_master, OFF)
	sendCommand(ff_slave_to_aq_master, OFF)
	sendCommand(start_a_aq, ON)
end

rule "Analyze_a_aq"
when
	Item start_a_aq received command ON
then
	sendCommand(start_a_aq, OFF)

// Forzatura
	if((currentDate.after(startingClosingDate) && currentDate.before(stoppingClosingDate))){
		forza= 1 

	else if (currentDate.after(startingActivationDate) && currentDate.before(stoppingActivationDate)){
		forza= 2

	else 
		forza= 0

// Air_Quality
	if (forza==0) {
		if () 
			adaptation_required_ff= true
		
		else if ()
			adaptation_required_gf= true
	}

	if(adaptation_required_ff || adaptation_required_gf){
		sendCommand(start_p_aq, ON)
	}
	else{
		sendCommand(start_m_gf, ON)
		sendCommand(start_m_ff, ON)
	}
end

rule "Plan_p_aq"
when
	Item start_p_aq received command ON
then
	sendCommand(start_p_aq, OFF)	

	if (adaptation_required_gf || forza!=0) {
		adaptation_required_gf= false	
		sendCommand(start_e_gf, ON)
	}
	if (adaptation_required_ff || forza!=0) {
		adaptation_required_ff= false
		sendCommand(start_e_ff, ON)
		

end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
	sendCommand(start_e_gf, OFF)
	sendCommand(start_m_gf, ON)

	if (forza!=0) {
		if (forza==1) {
			GF_Living_Window.postUpdate("OPEN")
            GF_Kitchen_Window.postUpdate("OPEN")
            GF_Bathroom_Window.postUpdate("OPEN")
		}
		else if (forza==2) {
			GF_Living_Window.postUpdate("CLOSED")
            GF_Kitchen_Window.postUpdate("CLOSED")
            GF_Bathroom_Window.postUpdate("CLOSED")
		}
	} else {

	}
end

rule "Plan_e_ff"
when
	Item start_e_ff received command ON
then
	sendCommand(start_e_ff, OFF)
	sendCommand(start_m_ff, ON)

	if (forza!=0) {
		if (forza==1) {
			FF_Bedroom_Window.postUpdate("OPEN")
			FF_ChildrenRoom_Window.postUpdate("OPEN")
		}
		else if (forza==2) {
			FF_Bedroom_Window.postUpdate("CLOSED")
			FF_ChildrenRoom_Window.postUpdate("CLOSED")
		}
	} else {
		
	}
end

