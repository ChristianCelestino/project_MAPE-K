var boolean adaptation_required_gf
var boolean adaptation_required_ff

var Number T_lv1                                       
var Number T_lv2  
var Number T_bat
var Number T_kit
var Number T_bed
var Number T_cb
var Number Target_Temp
var Number gf_liv1
var Number gf_liv2
var Number gf_bat
var Number gf_kit
var Number ff_bed
var Number ff_cb
val Number Hysteresis = 0.3


rule "StartLoop_MySmartHomeHC"
when
	System started
then
	start_a_hc.sendCommand(OFF)
	start_p_hc.sendCommand(OFF)
	start_m_gf.sendCommand(ON)
	start_e_gf.sendCommand(OFF)
	start_m_ff.sendCommand(ON)
	start_e_ff.sendCommand(OFF)
	gf_liv1= 0
	gf_liv2= 0
	gf_bat= 0
	gf_kit= 0
	ff_bed= 0
	ff_cb= 0
	adaptation_required_gf= false
	adaptation_required_ff= false
	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)  
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON or
	Item GF_Temperature_Setpoint changed or                                                                            
    Time cron "0/30 0/1 * 1/1 * ? *" //Fire the control every 30 seconds
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_hc_master, ON)
	T_lv1= GF_LZone1_Temperature.state as Number               
	T_lv2= GF_LZone2_Temperature.state as Number      
	T_bat= GF_Bathroom_Temperature.state as Number           
	T_kit= GF_Kitchen_Temperature.state as Number                
    Target_Temp= GF_Temperature_Setpoint.state as Number
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON or
	Item GF_Temperature_Setpoint changed or                                                                            
    Time cron "0/30 0/1 * 1/1 * ? *" //Fire the control every 30 seconds
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_hc_master, ON)
	T_bed= FF_Bedroom_Temperature.state as Number
	T_cb= FF_Childrenroom_Temperature.state as Number
end

rule "Aggregator_m_gf_m_ff_a_hc"
when
	Item gf_slave_to_hc_master received command ON or
	Item ff_slave_to_hc_master received command ON 
then
	sendCommand(gf_slave_to_hc_master, OFF)
	sendCommand(ff_slave_to_hc_master, OFF)
	sendCommand(start_a_hc, ON)
end

rule "Analyze_a_hc"
when
	Item start_a_hc received command ON
then
	sendCommand(start_a_hc, OFF)
	if(Heating_Mode.state!='STOP' && (((T_bat < (Target_Temp-Hysteresis)) && GF_Bathroom_heating.state!=ON) ||
	((T_bat > (Target_Temp+Hysteresis)) && GF_Bathroom_heating.state!=OFF) ||
	((T_lv1 < (Target_Temp-Hysteresis)) && GF_Living_heating1.state!=ON) ||
	((T_lv1 > (Target_Temp+Hysteresis)) && GF_Living_heating1.state!=OFF) ||
	((T_lv2 < (Target_Temp-Hysteresis)) && GF_Living_heating2.state!=ON) ||
	((T_lv2 > (Target_Temp+Hysteresis)) && GF_Living_heating2.state!=OFF) ||
	((T_kit < (Target_Temp-Hysteresis)) && GF_Kitchen_heating.state!=ON) ||
	((T_kit > (Target_Temp+Hysteresis)) && GF_Kitchen_heating.state!=OFF))){

		adaptation_required_gf= true
	}

	if (Heating_Mode.state!='STOP' && (((T_bed < (Target_Temp-Hysteresis)) && FF_Bedroom_heating.state!=ON) ||
	((T_bed > (Target_Temp+Hysteresis)) && FF_Bedroom_heating.state!=OFF) ||
	((T_cb < (Target_Temp-Hysteresis)) && FF_Childrenroom_heating.state!=ON) ||
	((T_cb > (Target_Temp+Hysteresis)) && FF_Childrenroom_heating.state!=OFF))) {

		adaptation_required_ff= true
	}

	if(adaptation_required_gf || adaptation_required_ff){
        sendCommand(start_p_hc, ON)
    }
    else{
        sendCommand(start_m_gf, ON)
        sendCommand(start_m_ff, ON)
    }
end

rule "Plan_p_hc"
when
	Item start_p_hc received command ON
then
	sendCommand(start_p_hc, OFF)
	if (adaptation_required_gf) {
		if ((T_bat < (Target_Temp-Hysteresis)) && GF_Bathroom_heating.state!=ON) {
			gf_bat= 1
		}
		else if ((T_bat > (Target_Temp+Hysteresis)) && GF_Bathroom_heating.state!=OFF) {
			gf_bat= 2
		}
		if ((T_lv1 < (Target_Temp-Hysteresis)) && GF_Living_heating1.state!=ON) {
			gf_liv1= 1
		}
		else if ((T_lv1 > (Target_Temp+Hysteresis)) && GF_Living_heating1.state!=OFF) {
			gf_liv1= 2
		}
		if ((T_lv2 < (Target_Temp-Hysteresis)) && GF_Living_heating2.state!=ON) {
			gf_liv2= 1
		}
		else if ((T_lv2 > (Target_Temp+Hysteresis)) && GF_Living_heating2.state!=OFF) {
			gf_liv2= 2
		}
		if ((T_kit < (Target_Temp-Hysteresis)) && GF_Kitchen_heating.state!=ON) {
			gf_kit= 1
		}
		else if ((T_kit > (Target_Temp+Hysteresis)) && GF_Kitchen_heating.state!=OFF) {
			gf_kit= 2
		}
		adaptation_required_gf= false
		sendCommand(start_e_gf, ON)
	}

	if (adaptation_required_ff) {
		if ((T_bed < (Target_Temp-Hysteresis)) && FF_Bedroom_heating.state!=ON) {
			ff_bed= 1
		}
		else if ((T_bed > (Target_Temp+Hysteresis)) && FF_Bedroom_heating.state!=OFF) {
			ff_bed= 2
		}
		if ((T_cb < (Target_Temp-Hysteresis)) && FF_Childrenroom_heating.state!=ON) {
			ff_cb= 1
		}
		else if ((T_cb > (Target_Temp+Hysteresis)) && FF_Childrenroom_heating.state!=OFF) {
			ff_cb= 2
		}
		adaptation_required_ff= false
		sendCommand(start_e_ff, ON)
	}
end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
	if (gf_liv1==1) {
		GF_Living_heating1.sendCommand(ON)
	}
	else if (gf_liv1==2) {
		GF_Living_heating1.sendCommand(OFF)
	}
	if (gf_liv2==1) {
		GF_Living_heating2.sendCommand(ON)
	}
	else if (gf_liv2==2) {
		GF_Living_heating2.sendCommand(OFF)
	}
	if (gf_kit==1) {
		GF_Kitchen_heating.sendCommand (ON)
	}
	else if (gf_kit==2) {
		GF_Kitchen_heating.sendCommand (OFF)
	}
	if (gf_bat==1) {
		GF_Bathroom_heating.sendCommand (ON)
	} 
	else if (gf_bat==2) {
		GF_Bathroom_heating.sendCommand(OFF)
	}
	gf_liv1= 0
	gf_liv2= 0
	gf_kit= 0
	gf_bat=0
	sendCommand(start_e_gf, OFF)
	sendCommand(start_m_gf, ON)
end

rule "Exec_e_ff"
when
	Item start_e_ff received command ON
then
	if (ff_bed==1) {
		FF_Bedroom_heating.sendCommand(ON)
	}
	else if (ff_bed==2) {
		FF_Bedroom_heating.sendCommand(OFF)
	}
	if (ff_cb==1) {
		FF_Childrenroom_heating.sendCommand (ON)
	}
	else if (ff_cb==2) {
		FF_Childrenroom_heating.sendCommand (OFF)
	}
	ff_bed= 0
	ff_cb= 0
	sendCommand(start_e_ff, OFF)
	sendCommand(start_m_ff, ON)
end