import java.util.Random
val Random random = new Random()

var boolean flag_wait
var boolean flag_precedenza_gf
var boolean flag_precedenza_ff
var boolean gf_call
var boolean ff_call
var boolean adaptation_required_gf // varibili per la richiesta di adattamento per gf e ff
var boolean adaptation_required_ff
var boolean check_unicita // variabile che nella componente A filtra il caso in cui ci sia un altro ciclo nella componente P e non abbia
                  // abbia ancora disabilitato i flag di adattamento

var Number T_lv1    // Variabili per la knowledge                                   
var Number T_lv2  
var Number T_bat
var Number T_kit
var Number T_bed
var Number T_cb
var Number Target_Temp_gf
var Number Target_Temp_ff
var Number gf_liv1 // Variabili per la modifica: 0= non fare nulla, 1= accendi il radiatore, 2= spegni radiatore
var Number gf_liv2
var Number gf_bat
var Number gf_kit
var Number ff_bed
var Number ff_cb
val Number Hysteresis = 0.3


rule "StartLoop_MySmartHomeHC"
when
	System started
then
	start_m_gf.sendCommand(ON)  // Setto le componente a OFF ad eccezione dei monitor
	start_m_ff.sendCommand(ON)
	start_a_hc.sendCommand(OFF)
	start_p_hc.sendCommand(OFF)
	start_e_gf.sendCommand(OFF)
	start_e_ff.sendCommand(OFF)
	gf_liv1= 0        // Inizializzazione variabili
	gf_liv2= 0
	gf_bat= 0
	gf_kit= 0
	ff_bed= 0
	ff_cb= 0
	gf_call= false
	ff_call= false
	flag_wait= false
	flag_precedenza_ff= false
	flag_precedenza_gf= false
	adaptation_required_gf= false // inizializzo le variabili di adattamento a "false"
	adaptation_required_ff= false
	check_unicita= false                        // inizializzo la variabile di check_unicita a "false"
	GF_Bathroom_heating.sendCommand(OFF) // All'inizio il riscaldamento è spento
	GF_Living_heating1.sendCommand(OFF)
	GF_Living_heating2.sendCommand(OFF)
	GF_Kitchen_heating.sendCommand(OFF)
	FF_Childrenroom_heating.sendCommand(OFF)
	FF_Bedroom_heating.sendCommand(OFF)
	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)  
	GF_Bathroom_Fire_Alarm.sendCommand(OFF)
	GF_Living_Fire_Alarm.sendCommand(OFF)
	GF_Kitchen_Fire_Alarm.sendCommand(OFF)
	FF_Bedroom_Fire_Alarm.sendCommand(OFF)
end 

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	T_lv1= GF_LZone1_Temperature.state as Number        // Aquisizione knowedge 
	T_lv2= GF_LZone2_Temperature.state as Number      
	T_bat= GF_Bathroom_Temperature.state as Number           
	T_kit= GF_Kitchen_Temperature.state as Number                
    Target_Temp_gf= GF_Temperature_Setpoint.state as Number 
	if (!flag_precedenza_ff) {
		if (ff_call)
			flag_precedenza_ff= true

		else 
			flag_precedenza_gf= true
	}
	gf_call= true
    sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_hc_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	T_bed= FF_Bedroom_Temperature.state as Number   // Aquisizione knowedge 
	T_cb= FF_Childrenroom_Temperature.state as Number
	Target_Temp_ff= FF_Temperature_Setpoint.state as Number
	if (!flag_precedenza_gf) {
		if (gf_call)
			flag_precedenza_gf= true

		else 
			flag_precedenza_ff= true
	} 
	ff_call= true
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_hc_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_hc"
when
	Item gf_slave_to_hc_master received command ON or
	Item ff_slave_to_hc_master received command ON 
then
	if (gf_slave_to_hc_master.state== ON) {
		sendCommand(gf_slave_to_hc_master, OFF)
	}

	else if (ff_slave_to_hc_master.state== ON){
		sendCommand(ff_slave_to_hc_master, OFF)
	}
	
	do {
	
	} while (start_a_hc.state== ON)

	sendCommand(start_a_hc, ON) 
end

rule "Analyze_a_hc"
when
	Item start_a_hc received command ON
then
    // verifico se ci sono le condizioni per un addattamento
	if(Heating_Mode.state!='STOP' && (((T_bat < (Target_Temp_gf-Hysteresis)) && GF_Bathroom_heating.state== OFF) ||  
	((T_bat > (Target_Temp_gf+Hysteresis)) && GF_Bathroom_heating.state== ON) ||
	((T_lv1 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating1.state== OFF) ||
	((T_lv1 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating1.state== ON) ||
	((T_lv2 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating2.state== OFF) ||
	((T_lv2 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating2.state== ON) ||
	((T_kit < (Target_Temp_gf-Hysteresis)) && GF_Kitchen_heating.state== OFF) ||
	((T_kit > (Target_Temp_gf+Hysteresis)) && GF_Kitchen_heating.state== ON))) {
		check_unicita= true                
		adaptation_required_gf= true
	} 
	
	if (Heating_Mode.state!='STOP' && (((T_bed < (Target_Temp_gf-Hysteresis)) && FF_Bedroom_heating.state== OFF) ||
	((T_bed > (Target_Temp_ff+Hysteresis)) && FF_Bedroom_heating.state== ON) ||
	((T_cb < (Target_Temp_ff-Hysteresis)) && FF_Childrenroom_heating.state== OFF) ||
	((T_cb > (Target_Temp_ff+Hysteresis)) && FF_Childrenroom_heating.state== ON))) {
		check_unicita= true
		adaptation_required_ff= true
	}
	if(check_unicita && (adaptation_required_gf || adaptation_required_ff)) {
		 if (gf_call && ((!ff_call) || (flag_precedenza_gf))) {
			gf_call= false
			flag_precedenza_gf= false
	 	}
		else if (ff_call && ((!gf_call) || (flag_precedenza_ff))) {
			ff_call= false
			flag_precedenza_ff= false
		}	

		createTimer(now.plusSeconds(0.5)) [|                         
				sendCommand(start_p_hc, ON)                           
			]
    }
  	else{
	    if (gf_call && ((!ff_call) || (flag_precedenza_gf))) {
			gf_call= false
			flag_precedenza_gf= false
			createTimer(now.plusSeconds(2)) [|  
    			sendCommand(start_m_gf, ON)
			]
	  }
		else if (ff_call && ((!gf_call) || (flag_precedenza_ff))) {
			ff_call= false
			flag_precedenza_ff= false
			createTimer(now.plusSeconds(2)) [| 
    			sendCommand(start_m_ff, ON)
		  	]
		}
    }
	check_unicita = false
	sendCommand(start_a_hc, OFF) 
end 

rule "Plan_p_hc"
when
	Item start_p_hc received command ON
then
	if (adaptation_required_gf) {       // in caso la variabile di adattamento gf sia attiva guarda in quale esatta stanza è richiesta 
		adaptation_required_gf= false   // una modifica, andandola a salvare sulla variabile di modifica rispettiva
		if (start_e_gf.state == OFF) {
			if ((T_bat < (Target_Temp_gf-Hysteresis)) && GF_Bathroom_heating.state== OFF) {
				gf_bat= 1
			}
			else if ((T_bat > (Target_Temp_gf+Hysteresis)) && GF_Bathroom_heating.state== ON) {
				gf_bat= 2
			}
			if ((T_lv1 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating1.state== OFF) {
				gf_liv1= 1
			}
			else if ((T_lv1 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating1.state== ON) {
				gf_liv1= 2
			}
			if ((T_lv2 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating2.state== OFF) {
				gf_liv2= 1
			}
			else if ((T_lv2 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating2.state== ON) {
				gf_liv2= 2
			}
			if ((T_kit < (Target_Temp_gf-Hysteresis)) && GF_Kitchen_heating.state== OFF) {
				gf_kit= 1
			}
			else if ((T_kit > (Target_Temp_gf+Hysteresis)) && GF_Kitchen_heating.state== ON) {
				gf_kit= 2
			}
			sendCommand(start_e_gf, ON)
		} 
	}

	if (adaptation_required_ff) {       // in caso la variabile di adattamento ff sia attiva guarda in quale esatta stanza è richiesta 
		adaptation_required_ff= false   // una modifica, andandola a salvare sulla variabile di modifica rispettiva
		if (start_e_ff.state == OFF) {
			if ((T_bed < (Target_Temp_gf-Hysteresis)) && FF_Bedroom_heating.state!=ON) {
				ff_bed= 1
			}
			else if ((T_bed > (Target_Temp_ff+Hysteresis)) && FF_Bedroom_heating.state== ON) {
				ff_bed= 2
			}
			if ((T_cb < (Target_Temp_ff-Hysteresis)) && FF_Childrenroom_heating.state== OFF) {
				ff_cb= 1
			}
			else if ((T_cb > (Target_Temp_ff+Hysteresis)) && FF_Childrenroom_heating.state== ON) {
				ff_cb= 2
			}
			sendCommand(start_e_ff, ON)
		} 
	}
	sendCommand(start_p_hc, OFF)
end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
	if (gf_liv1==1) {       // si va a controllare lo stato delle variabili di modifica, andando ad attuare eventuali modifiche
		gf_liv1= 0
		GF_Living_heating1.sendCommand(ON)
	}
	else if (gf_liv1==2) {
		gf_liv1= 0
		GF_Living_heating1.sendCommand(OFF)
	}
	if (gf_liv2==1) {
		gf_liv2= 0
		GF_Living_heating2.sendCommand(ON)
	}
	else if (gf_liv2==2) {
		gf_liv2= 0
		GF_Living_heating2.sendCommand(OFF)
	}
	if (gf_kit==1) {
		gf_kit= 0
		GF_Kitchen_heating.sendCommand (ON)
	}
	else if (gf_kit==2) {
		gf_kit= 0
		GF_Kitchen_heating.sendCommand (OFF)
	}
	if (gf_bat==1) {
		gf_bat=0
		GF_Bathroom_heating.sendCommand (ON)
	} 
	else if (gf_bat==2) {
		gf_bat=0
		GF_Bathroom_heating.sendCommand(OFF)
	}

	createTimer(now.plusSeconds(1)) [|
		sendCommand(start_e_gf, OFF)
    	sendCommand(start_m_gf, ON)
			
      ]
end 

rule "Exec_e_ff"
when
	Item start_e_ff received command ON
then                           // si va a controllare lo stato delle variabili di modifica, andando ad attuare eventuali modifiche
	if (ff_bed==1) {
		ff_bed= 0 
		FF_Bedroom_heating.sendCommand(ON)
	}
	else if (ff_bed==2) {
		ff_bed= 0 
		FF_Bedroom_heating.sendCommand(OFF)
	}
	if (ff_cb==1) {
		ff_cb= 0
		FF_Childrenroom_heating.sendCommand (ON)
	}
	else if (ff_cb==2) {
		ff_cb= 0
		FF_Childrenroom_heating.sendCommand (OFF)
	}

	createTimer(now.plusSeconds(1)) [|
		sendCommand(start_e_ff, OFF)
        sendCommand(start_m_ff, ON)
      ]
end 