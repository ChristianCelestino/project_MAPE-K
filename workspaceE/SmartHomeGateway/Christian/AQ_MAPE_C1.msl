abstract pattern MasterSlaveMAPE {
	system Sys

	group Master {
		components A, P
	}

	group Slave {
		managedSyS Sys
		components M, E
	}

	interaction Slave.M -> Master.A [*-SOME,1]
	interaction Master.P -> Slave.E [1,*-SOME]
	interaction Master.A -> Master.P [1,1]
}

//Aggregate MAPE loop for the concern Air Quality
concrete pattern AQ_MAPE concretizationOf MasterSlaveMAPE {
	system AirDetection: MasterSlaveMAPE.Sys
    group MasterAQ: MasterSlaveMAPE.Master
    group SlaveAQ: MasterSlaveMAPE.Slave
}

//My smart home fire detection subsystem: being a domestic building, fire detection takes the form of a fire 
//alarm system, incorporating three smoke devices in two zones: one in the Corridor (First Floor), and two in the
//kitchen and LivingRoom (Ground floor) 
//Managed items: group switch gSmokeFF, gSmokeGF, Number MaxTemperatureGF, MaxTemperatureFF, Switch  Fire_Alarm

configuration MySmartHomeAQ instanceOf AQ_MAPE {
    
    aq_ff: AQ_MAPE.AirDetection //fire detection system for First Floor
    aq_gf: AQ_MAPE.AirDetection //fire detection system for Ground Floor
    
    //master
	aq_master: AQ_MAPE.MasterAQ {
		components a_AQ:A, p_AQ:P
	}
    
    //ground floor slave
	gf_slave: AQ_MAPE.SlaveAQ {
		managedSyS aq_gf
		components m_gf:M, e_gf:E
	}

    //first floor slave
    ff_slave: AQ_MAPE.SlaveAQ {
		managedSyS aq_ff
		components m_ff:M, e_ff:E
	}

	//interactions
	aq_master.a_AQ -> aq_master.p_AQ
	gf_slave.m_gf -> aq_master.a_AQ
	ff_slave.m_ff -> aq_master.a_AQ
	aq_master.p_AQ -> gf_slave.e_gf
	aq_master.p_AQ -> ff_slave.e_ff
}

