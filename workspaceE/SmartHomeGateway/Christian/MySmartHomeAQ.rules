var boolean adaptation_required_a_AQ
var boolean adaptation_required_gf
var boolean adaptation_required_ff
import java.util.Random
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Calendar
import java.text.DateFormat
val Random random = new Random()
//support variables for dates
var String currentHour
var String currentMinute
var String startingClosingTime
var String stoppingClosingTime
var String startingSystemActivationTime
var String stoppingSystemActivationTime
var String currentDay
var Date startingClosingDate
var Date stoppingClosingDate
var Date startingActivationDate
var Date stoppingActivationDate
var Date currentDate
var DateFormat datos

rule "StartLoop_MySmartHomeAQ"
when
	System started
then
	start_a_AQ.sendCommand(OFF)
	start_p_AQ.sendCommand(OFF)
	start_m_gf.sendCommand(ON)
	start_e_gf.sendCommand(OFF)
	start_m_ff.sendCommand(ON)
	start_e_ff.sendCommand(OFF)
	adaptation_required_ff = false
	adaptation_required_gf = false
	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)
end

//-------------------------------------------------------------------------
rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_aq_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_aq_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_AQ"
when
	Item gf_slaveff_slave_to_aq_master received update ON
then
	sendCommand(gf_slave_to_aq_master, OFF)
	sendCommand(ff_slave_to_aq_master, OFF)
	sendCommand(start_a_AQ, ON)
end

//-------------------------------------------------------------------------
rule "Analyze_a_AQ"
when
	Item start_a_AQ received command ON
then
	sendCommand(start_a_AQ, OFF)
	if(cbQuality>=                                ){
		adaptation_required_a_AQ = true
	}
	else {
		adaptation_required_a_AQ = false
	}
	if(adaptation_required_a_AQ){
		sendCommand(start_p_AQ, ON)
	}
	else{
		sendCommand(start_m_gf, ON)
		sendCommand(start_m_ff, ON)
	}
end



rule "Plan_p_AQ"
when
	Item start_p_AQ received command ON
then
	sendCommand(start_p_AQ, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
	sendCommand(start_e_gf, OFF)
	sendCommand(start_m_gf, ON)
end


rule "Plan_p_AQ"
when
	Item start_p_AQ received command ON
then
	sendCommand(start_p_AQ, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

rule "Exec_e_ff"
when
	Item start_e_ff received command ON
then
	sendCommand(start_e_ff, OFF)
	sendCommand(start_m_ff, ON)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_aq_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_aq_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_AQ"
when
	Item gf_slaveff_slave_to_aq_master received update ON
then
	sendCommand(gf_slave_to_aq_master, OFF)
	sendCommand(ff_slave_to_aq_master, OFF)
	sendCommand(start_a_AQ, ON)
end

rule "Plan_p_AQ"
when
	Item start_p_AQ received command ON
then
	sendCommand(start_p_AQ, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

