import java.util.concurrent.locks.ReentrantLock

var boolean gf_mod
var boolean ff_mod
var boolean gf_priority
var boolean ff_priority
var boolean gf_call
var boolean ff_call
var boolean adaptation_required_gf        // varibili per la richiesta di adattamento per gf e ff
var boolean adaptation_required_ff   

var Number T_lv1    // Variabili per la knowledge                                   
var Number T_lv2  
var Number T_bat
var Number T_kit
var Number T_bed
var Number T_cb
var Number Target_Temp_gf
var Number Target_Temp_ff
var Number gf_liv1 // Variabili per la modifica: 0= non fare nulla, 1= accendi il radiatore, 2= spegni radiatore
var Number gf_liv2
var Number gf_bat
var Number gf_kit
var Number ff_bed
var Number ff_cb
val Number Hysteresis = 0.3

val ReentrantLock lock_m  = new ReentrantLock() 
val ReentrantLock lock_e = new ReentrantLock()

rule "StartLoop_MySmartHomeHC"
when
	System started
then
    gf_liv1= 0        // Inizializzazione variabili per la componente P
	gf_liv2= 0
	gf_bat= 0
	gf_kit= 0
	ff_bed= 0
	ff_cb= 0

	gf_mod= false                   // iniziializzo i flag di "mod" utilizzati per tener traccia di quali monitor li abbia chiamati all'interno delle componenti E)
	ff_mod= false
	gf_call= false                  // inizializzo i flag di "call" e di "precedenza" utilizzati dalla componente A per poter richiamare 
	ff_call= false                 //  l'esatto monitor che ha avviato tale componente
	ff_priority= false
	gf_priority= false
	adaptation_required_gf= false              // inizializzo le variabili di adattamento a "false"
	adaptation_required_ff= false

	createTimer(now.plusSeconds(1)) [|  
    	start_m_gf.sendCommand(ON)  // Setto le componente a OFF ad eccezione dei monitor
		start_m_ff.sendCommand(ON)
		start_a_hc.sendCommand(OFF)
		start_p_hc.sendCommand(OFF)
		start_e_gf.sendCommand(OFF)
		start_e_ff.sendCommand(OFF)
	]
	
    GF_Bathroom_heating.sendCommand(OFF)    // All'inizio il riscaldamento è spento
	GF_Living_heating1.sendCommand(OFF)
	GF_Living_heating2.sendCommand(OFF)
	GF_Kitchen_heating.sendCommand(OFF)
	FF_Childrenroom_heating.sendCommand(OFF)
	FF_Bedroom_heating.sendCommand(OFF)
	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)
end 

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then 
    try { 
        lock_m.lock()
    } finally {
        if (!ff_priority) {      // nel caso il ff_priority sia spento allora questo ciclo ha la precedenza in quanto è arrivato per primo

            gf_priority= true       
        }
        gf_call= true
        lock_m.unlock()
    }
    T_lv1= GF_LZone1_Temperature.state as Number        // Aquisizione knowedge 
	T_lv2= GF_LZone2_Temperature.state as Number      
	T_bat= GF_Bathroom_Temperature.state as Number           
	T_kit= GF_Kitchen_Temperature.state as Number                
    Target_Temp_gf= GF_Temperature_Setpoint.state as Number 
    sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_hc_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
    try {
        lock_m.lock()
    } finally {
        if (!gf_priority) {      // nel caso il ff_priority sia spento allora questo ciclo ha la precedenza in quanto è arrivato per primo

            ff_priority= true       
        }
        ff_call= true
        lock_m.unlock()
    }
    T_bed= FF_Bedroom_Temperature.state as Number   // Aquisizione knowedge 
	T_cb= FF_Childrenroom_Temperature.state as Number
	Target_Temp_ff= FF_Temperature_Setpoint.state as Number
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_hc_master, ON) 
end

rule "Aggregator_m_gf_m_ff_a_hc"
when
	Item gf_slave_to_hc_master received command ON or
	Item ff_slave_to_hc_master received command ON  
then
	if (gf_slave_to_hc_master.state== ON) {
		sendCommand(gf_slave_to_hc_master, OFF)
	}

	else if (ff_slave_to_hc_master.state== ON){
		sendCommand(ff_slave_to_hc_master, OFF)
	} 
	
	do {                          // serie di cicli do-while che garantisce la mutua esclusione nella componente A, e nel caso ci 
		do {                      // ci sia un addatamento garantisce mutua esclusione fino alle componenti E cosi da non sovrascrivere
            
		} while (gf_mod || ff_mod)
        
	} while (start_a_hc.state== ON)

	sendCommand (start_a_hc, ON)
end 

rule "Analyze_a_hc"
when
	Item start_a_hc received command ON
then
    if(Heating_Mode.state!='STOP' && (((T_bat < (Target_Temp_gf-Hysteresis)) && GF_Bathroom_heating.state== OFF) ||  
	((T_bat > (Target_Temp_gf+Hysteresis)) && GF_Bathroom_heating.state== ON) ||
	((T_lv1 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating1.state== OFF) ||
	((T_lv1 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating1.state== ON) ||
	((T_lv2 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating2.state== OFF) ||
	((T_lv2 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating2.state== ON) ||
	((T_kit < (Target_Temp_gf-Hysteresis)) && GF_Kitchen_heating.state== OFF) ||
	((T_kit > (Target_Temp_gf+Hysteresis)) && GF_Kitchen_heating.state== ON))) {           
		adaptation_required_gf= true
	} 
	// verifico se ci sono le condizioni per un addattamento per il ff
	if (Heating_Mode.state!='STOP' && (((T_bed < (Target_Temp_gf-Hysteresis)) && FF_Bedroom_heating.state== OFF) ||
	((T_bed > (Target_Temp_ff+Hysteresis)) && FF_Bedroom_heating.state== ON) ||
	((T_cb < (Target_Temp_ff-Hysteresis)) && FF_Childrenroom_heating.state== OFF) ||
	((T_cb > (Target_Temp_ff+Hysteresis)) && FF_Childrenroom_heating.state== ON))) {
		adaptation_required_ff= true
	}

	if(adaptation_required_gf || adaptation_required_ff) {   // verifico quale dei 2 cicli ha la precedenza e vado ad abilitate le variabili mod rispettive
		 if (gf_call && gf_priority) {    // disabilito i flag di call e di precedenza del piano gf se quest'ultimo ha la precedenza                 
			gf_call= false
			gf_priority= false
			if (ff_call && !ff_priority)  // abilito il flag precedenza della controparte, nel caso sia attivo un monitor senza procedenza di quest'ultimo
				ff_priority= true		// (siccome ci deve essere sempre un monitor con precedenza)

			gf_mod= true      // abilito il flag di gf_mod per tener traccia del fatto che è stato il piano gf a richiedere un adattamento
	 	}
		else if (ff_call && ff_priority) {  // disabilito i flag di call e di precedenza del piano ff se quest'ultimo ha la precedenza
			ff_call= false
			ff_priority= false
			if (gf_call && !gf_priority) // abilito il flag precedenza della controparte, nel caso sia attivo un monitor senza procedenza di quest'ultimo
				gf_priority= true	   // (siccome ci deve essere sempre un monitor con precedenza)

			ff_mod= true	// abilito il flag di ff_mod per tener traccia del fatto che è stato il piano ff a richiedere un adattamento
		}	
                      
		sendCommand(start_p_hc, ON)      // attivo componente P  
    }
  	else{ 
	    if (gf_call && gf_priority) {                      // verifico quale dei 2 cicli ha la precedenza e vado ad abilitate le variabili mod rispettive
			gf_call= false
			gf_priority= false 
			if (ff_call && !ff_priority)
				ff_priority= true

    		sendCommand(start_m_gf, ON)
	  }
		else if (ff_call && ff_priority) {
			ff_call= false
			ff_priority= false
			if (gf_call && !gf_priority)
				gf_priority= true

    		sendCommand(start_m_ff, ON)
		}
    }

	sendCommand(start_a_hc, OFF) 
end 

rule "Plan_p_hc" 
when
	Item start_p_hc received command ON
then
	if (adaptation_required_gf) {       // in caso la variabile di adattamento gf sia attiva guarda in quale esatta stanza è richiesta 
		adaptation_required_gf= false   // una modifica, andandola a salvare sulla variabile di modifica rispettiva
		if ((T_bat < (Target_Temp_gf-Hysteresis)) && GF_Bathroom_heating.state== OFF) {
			gf_bat= 1
		}
		else if ((T_bat > (Target_Temp_gf+Hysteresis)) && GF_Bathroom_heating.state== ON) {
			gf_bat= 2
		}
		if ((T_lv1 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating1.state== OFF) {
			gf_liv1= 1
		}
		else if ((T_lv1 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating1.state== ON) {
			gf_liv1= 2
		}
		if ((T_lv2 < (Target_Temp_gf-Hysteresis)) && GF_Living_heating2.state== OFF) {
			gf_liv2= 1
		}
		else if ((T_lv2 > (Target_Temp_gf+Hysteresis)) && GF_Living_heating2.state== ON) {
			gf_liv2= 2
		}
		if ((T_kit < (Target_Temp_gf-Hysteresis)) && GF_Kitchen_heating.state== OFF) {
			gf_kit= 1
		}
		else if ((T_kit > (Target_Temp_gf+Hysteresis)) && GF_Kitchen_heating.state== ON) {
			gf_kit= 2
		}
		sendCommand(start_e_gf, ON) 
	}

	if (adaptation_required_ff) {       // in caso la variabile di adattamento ff sia attiva guarda in quale esatta stanza è richiesta 
		adaptation_required_ff= false   // una modifica, andandola a salvare sulla variabile di modifica rispettiva
		if ((T_bed < (Target_Temp_gf-Hysteresis)) && FF_Bedroom_heating.state!=ON) {
			ff_bed= 1
		}
		else if ((T_bed > (Target_Temp_ff+Hysteresis)) && FF_Bedroom_heating.state== ON) {
			ff_bed= 2
		}
		if ((T_cb < (Target_Temp_ff-Hysteresis)) && FF_Childrenroom_heating.state== OFF) {
			ff_cb= 1
		}
		else if ((T_cb > (Target_Temp_ff+Hysteresis)) && FF_Childrenroom_heating.state== ON) {
			ff_cb= 2
		}
		sendCommand(start_e_ff, ON)
	}
	sendCommand(start_p_hc, OFF)
end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
    if (gf_liv1==1) {       // si va a controllare lo stato delle variabili di modifica, andando ad attuare eventuali modifiche
		gf_liv1= 0
		GF_Living_heating1.sendCommand(ON)
	}
	else if (gf_liv1==2) {
		gf_liv1= 0
		GF_Living_heating1.sendCommand(OFF)
	}
	if (gf_liv2==1) {
		gf_liv2= 0
		GF_Living_heating2.sendCommand(ON)
	}
	else if (gf_liv2==2) {
		gf_liv2= 0
		GF_Living_heating2.sendCommand(OFF)
	}
	if (gf_kit==1) {
		gf_kit= 0
		GF_Kitchen_heating.sendCommand (ON)
	}
	else if (gf_kit==2) {
		gf_kit= 0
		GF_Kitchen_heating.sendCommand (OFF)
	}
	if (gf_bat==1) {
		gf_bat=0
		GF_Bathroom_heating.sendCommand (ON)
	} 
	else if (gf_bat==2) {
		gf_bat=0
		GF_Bathroom_heating.sendCommand(OFF)
	}
    
	sendCommand(start_e_gf, OFF)

    try {
        lock_e.lock()
    }
    finally {
        if (gf_mod) {    // reset alla rispettiva componente M chiamante
            gf_mod= false
            sendCommand(start_m_gf, ON)
        }
        else if (ff_mod) {
            ff_mod= false
            sendCommand(start_m_ff, ON)
        }
        lock_e.unlock()
    } 
end

rule "Exec_e_ff"
when
	Item start_e_ff received command ON
then                          
    if (ff_bed==1) {
		ff_bed= 0 
		FF_Bedroom_heating.sendCommand(ON)
	}
	else if (ff_bed==2) {
		ff_bed= 0 
		FF_Bedroom_heating.sendCommand(OFF)
	}
	if (ff_cb==1) {
		ff_cb= 0
		FF_Childrenroom_heating.sendCommand (ON)
	}
	else if (ff_cb==2) {
		ff_cb= 0
		FF_Childrenroom_heating.sendCommand (OFF)
	}

	sendCommand(start_e_ff, OFF)

    try {
        lock_e.lock()
    }
    finally {
        if (gf_mod) {    // reset alla rispettiva componente M chiamante
            gf_mod= false
            sendCommand(start_m_gf, ON)
        }
        else if (ff_mod) {
            ff_mod= false
            sendCommand(start_m_ff, ON)
        }
        lock_e.unlock()
    }
end 