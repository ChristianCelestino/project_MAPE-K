import java.util.concurrent.locks.ReentrantLock

var boolean gf_mod
var boolean ff_mod
var boolean gf_priority
var boolean ff_priority
var boolean gf_call
var boolean ff_call
var boolean adaptation_required_gf        // varibili per la richiesta di adattamento per gf e ff
var boolean adaptation_required_ff                                   

val ReentrantLock lock_m  = new ReentrantLock()
val ReentrantLock lock_e = new ReentrantLock()

var Number cbTemp 
var Number bTemp 
var Number kiTemp 
var Number batTemp 
var Number lzOneTemp 
var Number lzTwoTemp 
var Number gf_bat
var Number gf_kit
var Number gf_liv1
var Number gf_liv2
var Number ff_bed 
var Number ff_cb
var Number ff_cor

rule "StartLoop_MySmartHomeFD"
when
	System started
then
	gf_liv1= 0        // Inizializzazione variabili per la componente P
	gf_liv2= 0
	gf_bat= 0
	gf_kit= 0
	ff_bed= 0
	ff_cb= 0
    ff_cor= 0

	gf_mod= false                   // iniziializzo i flag di "mod" utilizzati per tener traccia di quali monitor li abbia chiamati all'interno delle componenti E)
	ff_mod= false
	gf_call= false                  // inizializzo i flag di "call" e di "precedenza" utilizzati dalla componente A per poter richiamare 
	ff_call= false                 //  l'esatto monitor che ha avviato tale componente
	ff_priority= false
	gf_priority= false
	adaptation_required_gf= false              // inizializzo le variabili di adattamento a "false"
	adaptation_required_ff= false
  
    createTimer(now.plusSeconds(1)) [|  
        start_a_fd.sendCommand(OFF)
        start_p_fd.sendCommand(OFF)
        start_e_gf_fd.sendCommand(OFF)
        start_e_ff_fd.sendCommand(OFF)
        gf_slave_to_fd_master.sendCommand(OFF)
		ff_slave_to_fd_master.sendCommand(OFF)
        start_m_gf_fd.sendCommand(ON)  // Setto le componente a OFF ad eccezione dei monitor
        start_m_ff_fd.sendCommand(ON)
	]
    
	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)
end 

rule "Monitor_m_gf"
when
	Item start_m_gf_fd received command ON
then 
    logInfo("Fd_Sc1.rules", "FD:MONIOR GF")
    try {
        lock_m.lock()
    } finally {
        if (!ff_priority) {      // nel caso il ff_priority sia spento allora questo ciclo ha la precedenza in quanto è arrivato per primo

            gf_priority= true       
        } 
        gf_call= true
        lock_m.unlock()
    }
    kiTemp = GF_Kitchen_Temperature.state as Number 
	batTemp = GF_Bathroom_Temperature.state as Number
	lzOneTemp = GF_LZone1_Temperature.state as Number
	lzTwoTemp = GF_LZone2_Temperature.state as Number

    sendCommand(start_m_gf_fd, OFF)
	sendCommand(gf_slave_to_fd_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff_fd received command ON
then
	logInfo("Fd_Sc1.rules", "FD:MONIOR FF")
    try {
        lock_m.lock()
    } finally {
        if (!gf_priority) {      // nel caso il ff_priority sia spento allora questo ciclo ha la precedenza in quanto è arrivato per primo

            ff_priority= true       
        }
        ff_call= true
        lock_m.unlock()
    } 
    cbTemp = FF_Childrenroom_Temperature.state as Number 
	bTemp = FF_Bedroom_Temperature.state as Number

	sendCommand(start_m_ff_fd, OFF)
	sendCommand(ff_slave_to_fd_master, ON) 
end

rule "Aggregator_m_gf_m_ff_a_fd"
when
	Item gf_slave_to_fd_master received command ON or
	Item ff_slave_to_fd_master received command ON 
then
    
	if (gf_slave_to_fd_master.state== ON) {
		sendCommand(gf_slave_to_fd_master, OFF)
	}

	else if (ff_slave_to_fd_master.state== ON){
		sendCommand(ff_slave_to_fd_master, OFF)
	} 
	logInfo("Fd_Sc1.rules", "FD:------------------")
    Thread::sleep(1000)

	do {                          // serie di cicli do-while che garantisce la mutua esclusione nella componente A, e nel caso ci 
		do {                      // ci sia un addatamento garantisce mutua esclusione fino alle componenti E cosi da non sovrascrivere
            logInfo("Fd_Sc1.rules", "FD:WAITING FOR MOD")
		} while (gf_mod || ff_mod)
        logInfo("Fd_Sc1.rules", "FD:WAITING FOR ANALYZ")
	} while (start_a_fd.state== ON)

	sendCommand (start_a_fd, ON)
end 

rule "Analyze_a_fd"
when
	Item start_a_fd received command ON
then
    logInfo("Fd_Sc1.rules", "FD:ANALIZE")
    if(((lzOneTemp >= 45 || lzTwoTemp >= 45 || GF_Living_Smoke.state== ON) && GF_Living_Fire_Alarm.state == OFF) ||
        ((GF_Kitchen_Smoke.state== ON || kiTemp >= 45) && GF_Kitchen_Fire_Alarm.state== OFF) || 
        (batTemp >= 45 && GF_Bathroom_Fire_Alarm.state== OFF)) {
        
        adaptation_required_gf = true
    } 

    if((cbTemp >= 45 && FF_Children_Bedroom_Fire_Alarm.state== OFF) ||
        (bTemp >= 45 && FF_Bedroom_Fire_Alarm.state== OFF) ||
        (FF_Corridor_Smoke.state== ON && FF_Corridor_Fire_Alarm.state== OFF)) {
    
        adaptation_required_ff = true
    }

	if(adaptation_required_gf || adaptation_required_ff) {   // verifico quale dei 2 cicli ha la precedenza e vado ad abilitate le variabili mod rispettive
		 if (gf_call && gf_priority) {    // disabilito i flag di call e di precedenza del piano gf se quest'ultimo ha la precedenza                 
			gf_call= false
			gf_priority= false
			if (ff_call && !ff_priority)  // abilito il flag precedenza della controparte, nel caso sia attivo un monitor senza procedenza di quest'ultimo
				ff_priority= true		// (siccome ci deve essere sempre un monitor con precedenza)

			gf_mod= true      // abilito il flag di gf_mod per tener traccia del fatto che è stato il piano gf a richiedere un adattamento
	 	}
		else if (ff_call && ff_priority) {  // disabilito i flag di call e di precedenza del piano ff se quest'ultimo ha la precedenza
			ff_call= false
			ff_priority= false
			if (gf_call && !gf_priority) // abilito il flag precedenza della controparte, nel caso sia attivo un monitor senza procedenza di quest'ultimo
				gf_priority= true	   // (siccome ci deve essere sempre un monitor con precedenza)

			ff_mod= true	// abilito il flag di ff_mod per tener traccia del fatto che è stato il piano ff a richiedere un adattamento
		}	
                      
		sendCommand(start_p_fd, ON)      // attivo componente P   
    }
  	else{
          logInfo("Fd_Sc1.rules", "FD:RETURN")
	    if (gf_call && gf_priority) {                      // verifico quale dei 2 cicli ha la precedenza e vado ad abilitate le variabili mod rispettive
			gf_call= false
			gf_priority= false 
			if (ff_call && !ff_priority)
				ff_priority= true

    		sendCommand(start_m_gf_fd, ON)
	  }
		else if (ff_call && ff_priority) {
			ff_call= false
			ff_priority= false
			if (gf_call && !gf_priority)
				gf_priority= true

    		sendCommand(start_m_ff_fd, ON)
		}
    }

	sendCommand(start_a_fd, OFF) 
end 

rule "Plan_p_fd" 
when
	Item start_p_fd received command ON
then
	if (adaptation_required_gf) {       // in caso la variabile di adattamento gf sia attiva guarda in quale esatta stanza è richiesta 
		adaptation_required_gf= false   // una modifica, andandola a salvare sulla variabile di modifica rispettiva
       
       if ((kiTemp >= 45 && GF_Kitchen_Fire_Alarm.state == OFF) || GF_Kitchen_Smoke.state== ON) {
            gf_kit= 1
        }
        if (batTemp >= 45 && GF_Bathroom_Fire_Alarm.state== OFF) {
            gf_bat= 1
        }
        if ((lzOneTemp >= 45 && GF_Living_Fire_Alarm.state == OFF) || GF_Living_Smoke.state== ON ) {
            gf_liv1= 1
        }
        if (lzTwoTemp >= 45 && GF_Living_Fire_Alarm.state == OFF) {
            gf_liv2= 1
        } 

		sendCommand(start_e_gf_fd, ON) 
	}

	if (adaptation_required_ff) {       // in caso la variabile di adattamento ff sia attiva guarda in quale esatta stanza è richiesta 
		adaptation_required_ff= false   // una modifica, andandola a salvare sulla variabile di modifica rispettiva

        if (cbTemp >= 45 && FF_Children_Bedroom_Fire_Alarm.state== OFF) {
            ff_cb= 1
        }
        if (bTemp >= 45 && FF_Bedroom_Fire_Alarm.state== OFF) {
            ff_bed= 1
        } 
        if (FF_Corridor_Smoke.state== ON) {
            ff_cor= 1
        }

		sendCommand(start_e_ff_fd, ON)
	}

	sendCommand(start_p_fd, OFF)
end

rule "Exec_e_gf"
when
	Item start_e_gf_fd received command ON
then
    if (gf_bat== 1) {
        gf_bat= 0
        sendCommand(GF_Bathroom_Fire_Alarm, ON)
    }
    if (gf_kit== 1) {
        gf_kit= 0
        sendCommand (GF_Kitchen_Fire_Alarm, ON)
    }
    if (gf_liv1== 1) {
        gf_liv1= 0
        sendCommand (GF_Living_Fire_Alarm, ON)
    }
    if (gf_liv2== 1) {
        gf_liv2= 0
        sendCommand (GF_Living_Fire_Alarm, ON)
    }

	sendCommand(start_e_gf_fd, OFF)

    try {
        lock_e.lock()
    }
    finally {
        if (gf_mod) {    // reset alla rispettiva componente M chiamante
            gf_mod= false
            sendCommand(start_m_gf_fd, ON)
        }
        else if (ff_mod) {
            ff_mod= false
            sendCommand(start_m_ff_fd, ON)
        }
        lock_e.unlock()
    }
end

rule "Exec_e_ff"
when
	Item start_e_ff_fd received command ON
then                           // si va a controllare lo stato delle variabili di modifica, andando ad attuare eventuali modifiche
    if (ff_bed== 1) {
        ff_bed= 0
        sendCommand (FF_Bedroom_Fire_Alarm, ON)
    }
    if (ff_cb== 1) {
        ff_cb= 0
        sendCommand (FF_Children_Bedroom_Fire_Alarm, ON)
    }
    if (ff_cor== 1) {
        sendCommand (FF_Corridor_Fire_Alarm, ON)
    }
    
	sendCommand(start_e_ff_fd, OFF)

    try {
        lock_e.lock()
    }
    finally {
        if (gf_mod) {    // reset alla rispettiva componente M chiamante
            gf_mod= false
            sendCommand(start_m_gf_fd, ON)
        }
        else if (ff_mod) {
            ff_mod= false
            sendCommand(start_m_ff_fd, ON)
        }
        lock_e.unlock()
    }
end 