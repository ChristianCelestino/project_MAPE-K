var boolean adaptation_required_gf
var boolean adaptation_required_ff

rule "StartLoop_MySmartHomeAQ"
when
	System started
then
	/*start_a_aq.sendCommand(OFF)
	start_p_aq.sendCommand(OFF)
	start_m_gf.sendCommand(ON)
	start_e_gf.sendCommand(OFF)
	start_m_ff.sendCommand(ON)
	start_e_ff.sendCommand(OFF)
	adaptation_required_gf= false
	adaptation_required_ff= false*/
	if (Managing_System_Active.state == ON) Managing_System_Active.postUpdate(OFF)
end

rule "Analyze_a_aq"
when
	Item start_a_aq received command ON
then
	sendCommand(start_a_aq, OFF)
	if(((Math::random * 100.0).intValue + 1) <= 50 ){
		adaptation_required_a_aq = true
	}
	else {
		adaptation_required_a_aq = false
	}
	if(adaptation_required_a_aq){
		sendCommand(start_p_aq, ON)
	}
	else{
		sendCommand(start_m_gf, ON)
		sendCommand(start_m_ff, ON)
	}
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_aq_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_aq_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_aq"
when
	Item gf_slaveff_slave_to_aq_master received update ON
then
	sendCommand(gf_slave_to_aq_master, OFF)
	sendCommand(ff_slave_to_aq_master, OFF)
	sendCommand(start_a_aq, ON)
end

rule "Plan_p_aq"
when
	Item start_p_aq received command ON
then
	sendCommand(start_p_aq, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

rule "Exec_e_gf"
when
	Item start_e_gf received command ON
then
	sendCommand(start_e_gf, OFF)
	sendCommand(start_m_gf, ON)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_aq_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_aq_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_aq"
when
	Item gf_slaveff_slave_to_aq_master received update ON
then
	sendCommand(gf_slave_to_aq_master, OFF)
	sendCommand(ff_slave_to_aq_master, OFF)
	sendCommand(start_a_aq, ON)
end

rule "Plan_p_aq"
when
	Item start_p_aq received command ON
then
	sendCommand(start_p_aq, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

rule "Exec_e_ff"
when
	Item start_e_ff received command ON
then
	sendCommand(start_e_ff, OFF)
	sendCommand(start_m_ff, ON)
end

rule "Monitor_m_gf"
when
	Item start_m_gf received command ON
then
	sendCommand(start_m_gf, OFF)
	sendCommand(gf_slave_to_aq_master, ON)
end

rule "Monitor_m_ff"
when
	Item start_m_ff received command ON
then
	sendCommand(start_m_ff, OFF)
	sendCommand(ff_slave_to_aq_master, ON)
end

rule "Aggregator_m_gf_m_ff_a_aq"
when
	Item gf_slaveff_slave_to_aq_master received update ON
then
	sendCommand(gf_slave_to_aq_master, OFF)
	sendCommand(ff_slave_to_aq_master, OFF)
	sendCommand(start_a_aq, ON)
end

rule "Plan_p_aq"
when
	Item start_p_aq received command ON
then
	sendCommand(start_p_aq, OFF)
	sendCommand(start_e_gf, ON)
	sendCommand(start_e_ff, ON)
end

